# @configure_input@

SHELL := @_BASH@
VPATH := @srcdir@

ifndef PKG_TARG
target :=
else
target := $(PKG_TARG)-
endif

srcdir := @srcdir@
top_builddir := @top_builddir@
flex := @FLEX@
libtool := @LIBTOOL@
cxx := @CXX@
objcxx := @OBJCXX@
cflags := @CPPFLAGS@ @CXXFLAGS@ -DYYDEBUG=1 $(filter -DHAVE_FFI% -DHAVE_READLINE% -DHAVE_HISTORY_H,@DEFS@)
objcxxflags := @OBJCXXFLAGS@
ldflags := @LDFLAGS@
ltflags := @LTFLAGS@
library := @LIBS@ @LTLIBAPR@ @LTLIBICONV@
sed := @SED@
bison := @BISON@
time := @TIME@
gperf := @GPERF@
otool := @_OTOOL@
lipo := @_LIPO@
nm := @_NM@

INSTALL := @INSTALL@
INSTALL_PROGRAM := @INSTALL_PROGRAM@
INSTALL_DATA := @INSTALL_DATA@

PACKAGE_TARNAME := @PACKAGE_TARNAME@
prefix := @prefix@
exec_prefix := @exec_prefix@
bindir := @bindir@
sbindir := @sbindir@
libexecdir := @libexecdir@
datarootdir := @datarootdir@
datadir := @datadir@
sysconfdir := @sysconfdir@
sharedstatedir := @sharedstatedir@
localstatedir := @localstatedir@
includedir := @includedir@
oldincludedir := @oldincludedir@
docdir := @docdir@
infodir := @infodir@
htmldir := @htmldir@
dvidir := @dvidir@
pdfdir := @pdfdir@
psdir := @psdir@
libdir := @libdir@
localedir := @localedir@
mandir := @mandir@

CY_EXECUTE := @CY_EXECUTE@
CY_OBJECTIVEC := @CY_OBJECTIVEC@
CY_OBJECTIVEC_MACH := @CY_OBJECTIVEC_MACH@
CY_ATTACH_GROUP := @CY_ATTACH_GROUP@

git := @GIT@

ifneq ($(git),)
version := $(shell $(git) describe --always --tags --dirty="+" --match="v*" | $(sed) -e 's@-\([^-]*\)-\([^-]*\)$$@+\1.\2@;s@^v@@')
else
version := @PACKAGE_VERSION@
endif

paths := $(foreach path,$(paths),$(wildcard $(path)))
cflags += $(foreach path,$(paths),-I$(path) -L$(path))

all:
all := cycript

#dpkg_architecture := $(shell which dpkg-architecture 2>/dev/null)
#ifneq ($(dpkg_architecture),)
#arch := $(shell $(dpkg_architecture) -qDEB_HOST_ARCH 2>/dev/null)
#endif

header := Cycript.tab.hh Parser.hpp Pooling.hpp List.hpp Local.hpp cycript.hpp Internal.hpp Error.hpp String.hpp Exception.hpp Standard.hpp

code := 
code += Replace.lo Output.lo
code += Highlight.lo Display.lo
code += Cycript.tab.lo lex.cy.lo
code += Network.lo Parser.lo
code += JavaScriptCore.lo Library.lo

inject := 

filters := #E4X
ldid := true
entitle = $(ldid) -Scycript.xml
lib := lib
dll := @SO@
depends ?=

restart ?= $(MAKE)
uname_s ?= $(shell uname -s)
uname_p ?= $(shell uname -p)

ifeq ($(CY_EXECUTE),1)
cflags += -DCY_EXECUTE
code += sig/ffi_type.lo sig/parse.lo sig/copy.lo
code += Execute.lo Bridge.lo
filters += C
header += JavaScript.hpp
endif

cflags := -Wall -Werror -Wno-parentheses $(cflags)
cflags += -fno-common
ifneq ($(srcdir),.)
cflags += -I.
endif
cflags += -I$(srcdir) -I$(srcdir)/include

all += libcycript.la

filters += $(shell $(bison) <(echo '%code{}%%_:') -o/dev/null 2>/dev/null && echo Bison24 || echo Bison23)

ifdef arch
deb := $(shell grep ^Package: $(srcdir)/control.in | cut -d ' ' -f 2-)_$(shell grep ^Version: $(srcdir)/control.in | cut -d ' ' -f 2 | $(sed) -e 's/\#/$(version)/')_$(arch).deb

all:

ifeq ($(depends)$(dll),dylib)
control.tmp: control.in .libs/cycript .libs/$(lib)cycript.dylib
	$(sed) -e 's/&/'"$$(dpkg-query -S $$(otool -lah .libs/cycript .libs/*.dylib | grep dylib | grep -v ':$$' | $(sed) -e 's/^ *name //;s/ (offset [0-9]*)$$//' | sort -u) 2>/dev/null | $(sed) -e 's/:.*//; /^cycript$$/ d; s/$$/,/' | sort -u | tr '\n' ' ')"'/;s/, $$//;s/#/$(version)/;s/%/$(arch)/' $< >$@
else
ifeq ($(depends)$(dll),so)
control.tmp: control.in .libs/cycript .libs/$(lib)cycript.so
	$(sed) -e 's/&/'"$$(dpkg-query -S $$(ldd cycript $(lib)cycript.so | $(sed) -e '/:$$/ d; s/^[ \t]*\([^ ]* => \)\?\([^ ]*\) .*/\2/' | sort -u) 2>/dev/null | $(sed) -e 's/:.*//; /^cycript$$/ d; s/$$/,/' | sort -u | tr '\n' ' ')"'/;s/, $$//;s/#/$(version)/;s/%/$(arch)/' $< >$@
else
control.tmp: control.in
	$(sed) -e 's/&/$(depends)/;s/,$$//;s/#/$(version)/;s/%/$(arch)/' $< >$@
endif
endif

control: control.tmp
	[[ -e control ]] && diff control control.tmp &>/dev/null || cp -pRf control.tmp control

$(deb): $(all) control
	rm -rf package
	mkdir -p package/DEBIAN
	cp -pR control package/DEBIAN
	mkdir -p package/usr/{bin,lib,sbin}
	cp -pR .libs/$(lib)cycript.0.$(dll) package/usr/lib
	cp -pR .libs/$(lib)cycript.$(dll) package/usr/lib
	cp -pR .libs/cycript package/usr/bin
	dpkg-deb -b package $(deb)
endif

ifeq ($(CY_EXECUTE),1)
Bridge.gperf: Bridge.def Bridge.sh
	$(srcdir)/Bridge.sh $< >$@

Bridge.hpp: Bridge.gperf
	$(gperf) $< | $(sed) -e 's/defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__/0/' >$@

Bridge.lo: Bridge.hpp
endif

ifeq ($(CY_OBJECTIVEC),1)
filters += ObjectiveC
header += Struct.hpp ObjectiveC/Internal.hpp ObjectiveC/Syntax.hpp
code += ObjectiveC/Output.lo ObjectiveC/Replace.lo ObjectiveC/Library.lo

Struct.hpp:
	$$($(objcxx) -print-prog-name=cc1obj) -print-objc-runtime-info </dev/null >$@

ifeq ($(CY_OBJECTIVEC_MACH),1)
code += Handler.lo
cflags += -DCY_ATTACH -DCY_LIBRARY='"$(libdir)/libcycript.$(dll)"'
inject += Mach/Inject.lo

Mach/Inject.lo: Trampoline.t.hpp Baton.hpp

%.t.lo: %.t.cpp Baton.hpp Trampoline.hpp
	$(libtool) --mode=compile $(cxx) $(cflags) -c -o $@ $< -fno-stack-protector -fno-exceptions -O0

%.t.hpp: %.t.lo trampoline.sh
	$(srcdir)/trampoline.sh $@ .libs/lib$*.t.$(dll) $* $(sed) $(otool) $(lipo) $(nm) $(libtool) --mode=link $(cxx) $(ldflags) -o lib$*.t.la $< -rpath $(libdir) -Xcompiler -nostdlib
endif
endif

all: $(all)

clean::
	rm -rf *.lo *.o *.d *.t.hpp .libs */*.d */*.lo */.libs lib*.la $(all) Struct.hpp lex.cy.cpp Cycript.tab.cc Cycript.tab.hh location.hh position.hh stack.hh Cycript.yy Cycript.l control Bridge.gperf Bridge.hpp Cycript.output
ifneq ($(srcdir),.)
	rm -rf Mach ObjectiveC sig
endif

distclean: clean
	rm -f GNUmakefile Makefile config.log config.status libtool

%.yy: %.yy.in
	$(srcdir)/Filter.sh <$< >$@ $(filters)

%.l: %.l.in
	$(srcdir)/Filter.sh <$< >$@ $(filters)

Cycript.tab.cc Cycript.tab.hh location.hh position.hh: Cycript.yy
	$(bison) -v --report=state $<
	! grep -n '^ *$$default  reduce using rule [0-9]* (Lex[A-Z][^)]*)$$' Cycript.output -B 2 | grep 'shift, and go to state [0-9]*$$'
	! grep -n '^ *$$default  reduce using rule [0-9]* (Lex[A-Z][^)]*)$$' Cycript.output -B 2 | grep -v '$$default' | grep 'reduce using rule [0-9]* ([^)]*)$$'

lex.cy.cpp: Cycript.l
	$(flex) -t $< | $(sed) -e 's/int yyl;/yy_size_t yyl;/;s/int yyleng_r;/yy_size_t yyleng_r;/' >$@

#Parser.hpp: Parser.py Parser.dat
#	./Parser.py <Parser.dat >$@

Cycript.tab.lo: Cycript.tab.cc $(header)
	$(libtool) --mode=compile $(cxx) $(cflags) -c -o $@ $<

lex.cy.lo: lex.cy.cpp $(header)
	$(libtool) --mode=compile $(cxx) $(cflags) -c -o $@ $<

%.lo: %.cpp $(header)
	$(libtool) --mode=compile $(cxx) $(cflags) -c -o $@ $<

%.lo: %.mm $(header)
	$(libtool) --mode=compile $(objcxx) $(objcxxflags) $(cflags) -c -o $@ $<

libcycript.la: $(code)
	$(libtool) --mode=link $(cxx) $(ltflags) $(ldflags) -o $@ $(filter %.lo,$^) $(library) $(link) -rpath $(libdir)
	$(ldid) .libs/$(lib)cycript.$(dll)

cycript: Console.lo libcycript.la $(inject)
	$(libtool) --mode=link $(cxx) $(ltflags) $(ldflags) -o $@ $(filter %.lo,$^) libcycript.la $(link) -rpath $(libdir)
	$(entitle) .libs/cycript

package: $(deb)

test: cycript
	if [[ -e target.cy ]]; then ./cycript -c target.cy && echo; fi
	if [[ -e jquery.js ]]; then $(time) ./cycript -c jquery.js >jquery.cyc.js; gzip -9c jquery.cyc.js >jquery.cyc.js.gz; wc -c jquery.{mam,gcc,cyc,bak,yui}.js; wc -c jquery.{cyc,gcc,bak,mam,yui}.js.gz; fi
	if [[ -e test.cy ]]; then ./cycript test.cy; fi

install: cycript libcycript.la
	$(INSTALL) -d $(DESTDIR)$(bindir) $(DESTDIR)$(libdir)
	$(libtool) --mode=install $(INSTALL_PROGRAM) libcycript.la $(DESTDIR)$(libdir)/libcycript.la
	$(libtool) --mode=install $(INSTALL_PROGRAM) cycript $(DESTDIR)$(bindir)/cycript
ifneq ($(CY_ATTACH_GROUP),)
	chgrp $(CY_ATTACH_GROUP) $(DESTDIR)$(bindir)/cycript
	chmod g+s $(DESTDIR)$(bindir)/cycript
endif

uninstall:
	$(libtool) --mode=uninstall rm -f $(DESTDIR)$(bindir)/cycript
	$(libtool) --mode=uninstall rm -f $(DESTDIR)$(libdir)/libcycript.la

.PHONY: all clean dist install uninstall package test control.tmp
